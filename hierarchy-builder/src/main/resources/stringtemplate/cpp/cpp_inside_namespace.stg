InsideNamespace (constant,builder) ::= <<

class Constants {
public :
    $constant; separator="\n"$
};

template<class T>
class Appender {
    bool delBuf;
protected:
    uint8_t* buf;
    size_t* currentSize;

    Appender() : buf(new uint8_t[Constants::BUFFER_SIZE]),currentSize(new size_t(0)), delBuf(true) {}

public:

    Appender(uint8_t* buf, size_t* currentSize) : buf(buf),currentSize(currentSize), delBuf(false) {}

    ~Appender() {
        if (delBuf) {
            delete[] buf;
            delete currentSize;
        }
    }

    template<class R>
    Appender<T>& append(R val) {
        size_t sizeOfType = sizeof(val);
        if((*currentSize + sizeOfType) >= Constants::BUFFER_SIZE) {
            throw std::runtime_error("appending given type would exceed buffer size of Builder");
        }
        for (; sizeOfType > 0; sizeOfType--) {
            size_t currentIndex = *currentSize;
            buf[(*currentSize)++] = ((val \>\> ((sizeOfType-1)*8)) & 0xff);
        }
        return *this;
    }

    T build() {
        size_t now = *currentSize;
        *currentSize = 0;
        return T(std::string((char*)buf, now));
    }
};

$builder$
>>