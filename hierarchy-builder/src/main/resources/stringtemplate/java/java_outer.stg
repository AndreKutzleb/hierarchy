Outer(package,className,constant,builder) ::= <<
$if(package)$package $package$;
$endif$
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.function.Function;

/**
/* Autogenerated code. Created by hierarchy-builder.
 */
public class $className$<T> {

	private class Constants {
        $constant; separator="\n"$
	}
    private final ByteBuffer buffer = ByteBuffer.allocate(Constants.BUFFER_SIZE);
	private final Function<byte[], T> builder;
	private final Instance build = new Instance();

	private $className$(Function<byte[], T> builder) {
		this.builder = builder;
	}
	
	public class Appender {

		public Appender append(byte byteVal) throws BufferOverflowException {
			buffer.put(byteVal);
			return this;
		}

		public Appender append(short shortVal) throws BufferOverflowException {
			buffer.putShort(shortVal);
			return this;
		}

		public Appender append(int intVal) throws BufferOverflowException {
			buffer.putInt(intVal);
			return this;
		}

		public Appender append(long longVal) throws BufferOverflowException {
			buffer.putLong(longVal);
			return this;
		}

		public T build() {
			buffer.flip();
			T result = builder.apply(Arrays.copyOfRange(buffer.array(), 0, buffer.limit()));
			buffer.clear();
			return result;

		}
	}

	public static <T> $className$<T>.Instance newCustomBuilderInstance(Function<byte[], T> builder) {
		return new $className$<>(builder).build;
	}

	public static $className$<byte[]>.Instance newArrayBuilderInstance() {
		return new $className$<>(Function.identity()).build;
	}

	public static $className$<String>.Instance newStringBuilderInstance() {
		return new $className$<>((bytes) -> new String(bytes, StandardCharsets.UTF_8)).build;
	}
    
    $builder$
}
>>